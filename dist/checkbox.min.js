const smCheckbox=document.createElement("template");smCheckbox.innerHTML='\n<style>\n    *{\n        padding: 0;\n        margin: 0;\n        -webkit-box-sizing: border-box;\n                box-sizing: border-box;\n    } \n    :host{\n        display: -webkit-inline-box;\n        display: -ms-inline-flexbox;\n        display: inline-flex;\n        --height: 1.6rem;\n        --width: 1.6rem;\n        --border-radius: 0.2rem;\n        --border-color: rgba(var(--text-color), 0.7);\n    }\n    :host([disabled]) {\n        opacity: 0.6;\n        pointer-events: none;\n    }\n    .checkbox {\n        position: relative;\n        display:-webkit-box;\n        display:-ms-flexbox;\n        display:flex;\n        -webkit-box-align: center;\n            -ms-flex-align: center;\n                align-items: center;\n        cursor: pointer;\n        height: 1.5rem;\n        outline: none;\n        -webkit-tap-highlight-color: transparent;\n    }\n    \n    .checkbox:active .icon,\n    .checkbox:focus-within .icon{\n        box-shadow: 0 0 0 0.3rem var(--accent-color) inset;\n    }\n    \n    .checkbox input {\n        display: none;\n    }\n    \n    .checkbox .checkmark {\n        stroke-dashoffset: -65;\n        stroke-dasharray: 65;\n        -webkit-transition: stroke-dashoffset 0.3s; \n        -o-transition: stroke-dashoffset 0.3s; \n        transition: stroke-dashoffset 0.3s;\n    }\n    \n    .checkbox input:checked ~ svg .checkmark {\n        stroke-dashoffset: 0;\n        stroke: rgba(var(--foreground-color), 1);\n    }\n    .checkbox input:checked ~ .icon {\n        stroke-width: 8; \n        stroke: var(--accent-color);\n        background: var(--accent-color);\n    }\n    .checkbox input:not(:checked) ~ .icon {\n        box-shadow: 0 0 0 0.2rem var(--border-color) inset;\n    }\n    \n    .icon {\n        fill: none;\n        height: var(--height);\n        width: var(--width);\n        padding: 0.2rem;\n        stroke: rgba(var(--text-color), 0.7);\n        stroke-width: 6;\n        overflow: visible;\n        stroke-linecap: round;\n        stroke-linejoin: round;\n        -webkit-transition: background 0.3s;\n        -o-transition: background 0.3s;\n        transition: background 0.3s;\n        border-radius: var(--border-radius);\n    }\n</style>\n<label class="checkbox" tabindex="0">\n    <input type="checkbox">\n    <svg class="icon" viewBox="0 0 64 64">\n        <title>checkbox</title>\n        <path class="checkmark" d="M50.52,19.56,26,44.08,13.48,31.56" />\n    </svg>\n    <slot></slot>\n</label>',customElements.define("sm-checkbox",class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}).append(smCheckbox.content.cloneNode(!0)),this.checkbox=this.shadowRoot.querySelector(".checkbox"),this.input=this.shadowRoot.querySelector("input"),this.isChecked=!1,this.isDisabled=!1,this.dispatch=this.dispatch.bind(this),this.handleKeyup=this.handleKeyup.bind(this),this.handleChange=this.handleChange.bind(this)}static get observedAttributes(){return["disabled","checked"]}get disabled(){return this.isDisabled}set disabled(e){e?this.setAttribute("disabled",""):this.removeAttribute("disabled")}get checked(){return this.isChecked}set checked(e){e?this.setAttribute("checked",""):this.removeAttribute("checked")}set value(e){this.val=e,this.setAttribute("value",value)}get value(){return getAttribute("value")}dispatch(){this.dispatchEvent(new CustomEvent("change",{bubbles:!0,composed:!0}))}handleKeyup(e){"Enter"!==e.code&&"Space"!==e.code||0!=this.isDisabled||(this.hasAttribute("checked")?(this.input.checked=!1,this.removeAttribute("checked")):(this.input.checked=!0,this.setAttribute("checked","")))}handleChange(e){this.input.checked?this.setAttribute("checked",""):this.removeAttribute("checked")}connectedCallback(){this.val="",this.addEventListener("keyup",this.handleKeyup),this.input.addEventListener("change",this.handleChange)}attributeChangedCallback(e,t,n){t!==n&&("disabled"===e?this.isDisabled="true"===n:"checked"===e&&(this.hasAttribute("checked")?(this.isChecked=!0,this.input.checked=!0):(this.input.checked=!1,this.isChecked=!1),this.dispatch()))}disconnectedCallback(){this.removeEventListener("keyup",this.handleKeyup),this.removeEventListener("change",this.handleChange)}});