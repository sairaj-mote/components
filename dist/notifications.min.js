const smNotifications=document.createElement("template");smNotifications.innerHTML='\n<style>\n    *{\n        padding: 0;\n        margin: 0;\n        -webkit-box-sizing: border-box;\n                box-sizing: border-box;\n    } \n    :host{\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n    }\n    .hide{\n        opacity: 0 !important;\n        pointer-events: none !important;\n    }\n    .notification-panel{\n        display: -ms-grid;\n        display: grid;\n        width: 100%;\n        position: fixed;\n        top: 0;\n        right: 0;\n        z-index: 100;\n        max-height: 100%;\n        overflow: hidden auto;\n        -ms-scroll-chaining: none;\n            overscroll-behavior: contain;\n        }\n        .no-transformations{\n        -webkit-transform: none;\n            -ms-transform: none;\n                transform: none;\n        opacity: 1;\n    }\n    .notification-panel:empty{\n        display:none;\n    }\n    .notification{\n        display: -webkit-box;\n        display: -ms-flexbox;\n        display: flex;\n        opacity: 0;\n        padding: 1rem 1.5rem;\n        margin-bottom: 0.5rem;\n        -webkit-transform: translateY(-1rem);\n            -ms-transform: translateY(-1rem);\n                transform: translateY(-1rem);\n        position: relative;\n        border-radius: 0.3rem;\n        -webkit-box-shadow: 0 0.1rem 0.2rem rgba(0, 0, 0, 0.1),\n                    0.5rem 1rem 2rem rgba(0, 0, 0, 0.1);\n                box-shadow: 0 0.1rem 0.2rem rgba(0, 0, 0, 0.1),\n                    0.5rem 1rem 2rem rgba(0, 0, 0, 0.1);\n        background: rgba(var(--foreground-color), 1);\n        -webkit-transition: height 0.3s, opacity 0.3s, -webkit-transform 0.3s;\n        transition: height 0.3s, opacity 0.3s, -webkit-transform 0.3s;\n        -o-transition: height 0.3s, transform 0.3s, opacity 0.3s;\n        transition: height 0.3s, transform 0.3s, opacity 0.3s;\n        transition: height 0.3s, transform 0.3s, opacity 0.3s, -webkit-transform 0.3s;\n        overflow: hidden;\n        overflow-wrap: break-word;\n        word-wrap: break-word;\n        -ms-word-break: break-all;\n        word-break: break-all;\n        word-break: break-word;\n        -ms-hyphens: auto;\n        -webkit-hyphens: auto;\n        hyphens: auto;\n        max-width: 100%;\n        touch-action: none;\n    }\n    h4:first-letter,\n    p:first-letter{\n        text-transform: uppercase;\n    }\n    h4{\n        font-weight: 400;\n    }\n    p{\n        line-height: 1.6;\n        -webkit-box-flex: 1;\n            -ms-flex: 1;\n                flex: 1;\n        color: rgba(var(--text-color), 0.9);\n        overflow-wrap: break-word;\n        overflow-wrap: break-word;\n        word-wrap: break-word;\n        -ms-word-break: break-all;\n        word-break: break-all;\n        word-break: break-word;\n        -ms-hyphens: auto;\n        -webkit-hyphens: auto;\n        hyphens: auto;\n        max-width: 100%;\n    }\n    .notification:last-of-type{\n        margin-bottom: 0;\n    }\n    .icon {\n        fill: none;\n        height: 1.6rem;\n        width: 1.6rem;\n        stroke: rgba(var(--text-color), 0.7);\n        overflow: visible;\n        stroke-linecap: round;\n        border-radius: 1rem;\n        stroke-linejoin: round;\n        cursor: pointer;\n    }\n    .error-icon{\n        stroke: #E53935;\n    }\n    .success-icon{\n        stroke: #00C853;\n    }\n    .close{\n        margin-left: 1rem;\n        padding: 0.5rem;\n        stroke-width: 10;\n    }\n    .notification-icon{\n        height: 1.4rem;\n        width: 1.4rem;\n        margin: 0.3em 1rem 0 0;\n        stroke-width: 6;\n    }\n    @media screen and (min-width: 640px){\n        .notification-panel{\n            max-width: 28rem;\n            width: max-content;\n            -webkit-box-pack: end;\n                -ms-flex-pack: end;\n            justify-content: flex-end;\n        }\n        .notification{\n            -ms-grid-column-align: end;\n                justify-self: end;\n            width: auto;\n            margin-right: 1.5rem;\n            margin-bottom: 1rem;\n            border-bottom: none;\n            border: solid 1px rgba(var(--text-color), 0.2);\n            -webkit-transform: translateX(1rem);\n                -ms-transform: translateX(1rem);\n                    transform: translateX(1rem);\n        }\n    }\n    @media screen and (any-hover: none){\n        .close{\n            display: none\n        }\n    }\n</style>\n<div class="notification-panel"></div>\n',customElements.define("sm-notifications",class extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}).append(smNotifications.content.cloneNode(!0)),this.handleTouchStart=this.handleTouchStart.bind(this),this.handleTouchMove=this.handleTouchMove.bind(this),this.handleTouchEnd=this.handleTouchEnd.bind(this),this.movePopup=this.movePopup.bind(this),this.resetPosition=this.resetPosition.bind(this),this.push=this.push.bind(this),this.removeNotification=this.removeNotification.bind(this),this.clearAll=this.clearAll.bind(this)}handleTouchStart(t){this.notification=t.target.closest(".notification"),this.touchStartX=t.changedTouches[0].clientX,this.notification.style.transition="initial",this.touchStartTime=t.timeStamp}handleTouchMove(t){t.preventDefault(),this.touchStartX<t.changedTouches[0].clientX?(this.offset=t.changedTouches[0].clientX-this.touchStartX,this.touchEndAnimataion=requestAnimationFrame(this.movePopup)):(this.offset=-(this.touchStartX-t.changedTouches[0].clientX),this.touchEndAnimataion=requestAnimationFrame(this.movePopup))}handleTouchEnd(t){this.notification.style.transition="transform 0.3s, opacity 0.3s",this.touchEndTime=t.timeStamp,cancelAnimationFrame(this.touchEndAnimataion),this.touchEndX=t.changedTouches[0].clientX,this.touchEndTime-this.touchStartTime>200?this.touchEndX-this.touchStartX>this.threshold?this.removeNotification(this.notification):this.touchStartX-this.touchEndX>this.threshold?this.removeNotification(this.notification,!0):this.resetPosition():this.touchEndX>this.touchStartX?this.removeNotification(this.notification):this.removeNotification(this.notification,!0)}movePopup(){this.notification.style.transform=`translateX(${this.offset}px)`}resetPosition(){this.notification.style.transform="translateX(0)"}push(t,n,i){let o=document.createElement("div"),e="";o.classList.add("notification"),i&&o.classList.add("pinned"),"error"===n?e+='\n    <svg class="notification-icon icon error-icon" viewBox="0 0 64 64">\n            <path d="M32,4.73a3.17,3.17,0,0,1,2.76,1.59l13.9,24.09L62.57,54.49a3.19,3.19,0,0,1-2.76,4.78H4.19a3.19,3.19,0,0,1-2.76-4.78L15.34,30.41,29.24,6.32A3.17,3.17,0,0,1,32,4.73m0-1a4.14,4.14,0,0,0-3.62,2.09L14.47,29.91.57,54a4.19,4.19,0,0,0,3.62,6.28H59.81A4.19,4.19,0,0,0,63.43,54L49.53,29.91,35.62,5.82A4.14,4.14,0,0,0,32,3.73Z"/>\n            <line x1="32" y1="24" x2="32" y2="36"/>\n            <line x1="32" y1="46" x2="32" y2="48"/>\n    </svg>':"success"===n&&(e+='\n        <svg class="notification-icon icon success-icon" viewBox="0 0 64 64">\n            <polyline points="0.35 31.82 21.45 52.98 63.65 10.66"/>\n        </svg>'),e+=`\n                    <p>${t}</p>\n                    <svg class="icon close" viewBox="0 0 64 64">\n                        <title>Close</title>\n                        <line x1="64" y1="0" x2="0" y2="64"/>\n                        <line x1="64" y1="64" x2="0" y2="0"/>\n                    </svg>`,o.innerHTML=e,this.notificationPanel.prepend(o),window.innerWidth>640?o.animate([{transform:"translateX(1rem)",opacity:"0"},{transform:"translateX(0)",opacity:"1"}],this.animationOptions).onfinish=(()=>{o.setAttribute("style","transform: none;")}):o.setAttribute("style","transform: translateY(0); opacity: 1"),o.addEventListener("touchstart",this.handleTouchStart),o.addEventListener("touchmove",this.handleTouchMove),o.addEventListener("touchend",this.handleTouchEnd)}removeNotification(t,n){this.offset||(this.offset=0),n?t.animate([{transform:`translateX(${this.offset}px)`,opacity:"1"},{transform:"translateX(-100%)",opacity:"0"}],this.animationOptions).onfinish=(()=>{t.remove()}):t.animate([{transform:`translateX(${this.offset}px)`,opacity:"1"},{transform:"translateX(100%)",opacity:"0"}],this.animationOptions).onfinish=(()=>{t.remove()})}clearAll(){Array.from(this.notificationPanel.children).forEach(t=>{this.removeNotification(t)})}connectedCallback(){this.notificationPanel=this.shadowRoot.querySelector(".notification-panel"),this.animationOptions={duration:300,fill:"forwards",easing:"ease"},this.fontSize=Number(window.getComputedStyle(document.body).getPropertyValue("font-size").match(/\d+/)[0]),this.notification,this.offset,this.touchStartX=0,this.touchEndX=0,this.touchStartTime=0,this.touchEndTime=0,this.threshold=.3*this.notificationPanel.getBoundingClientRect().width,this.touchEndAnimataion,this.notificationPanel.addEventListener("click",t=>{t.target.closest(".close")&&this.removeNotification(t.target.closest(".notification"))});const t=new MutationObserver(t=>{t.forEach(t=>{"childList"===t.type&&(t.addedNodes.length?(t.addedNodes[0].classList.contains("pinned")||setTimeout(()=>{this.removeNotification(t.addedNodes[0])},5e3),window.innerWidth>640?this.notificationPanel.style.padding="1.5rem 0 3rem 1.5rem":this.notificationPanel.style.padding="1rem 1rem 2rem 1rem"):t.removedNodes.length&&!this.notificationPanel.children.length&&(this.notificationPanel.style.padding=0))})});t.observe(this.notificationPanel,{attributes:!0,childList:!0,subtree:!0})}});